require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const Web3 = require("web3");
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const usedTxFile = "used_txhashes.json";
if (!fs.existsSync(usedTxFile)) fs.writeFileSync(usedTxFile, "[]");
const USED_TX_FILE = "used_txhashes.json";

// ‚úÖ Bot and Web3 Init
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const web3 = new Web3(process.env.RPC_URL);

// ‚úÖ Constants
const ADMIN_ID = process.env.ADMIN_ID;
const GROUP_ID = process.env.GROUP_ID;
const WALLET = "0xC421E42508269556F0e19f2929378aA7499CD8Db".toLowerCase();
const USDT_CONTRACT = "0x55d398326f99059f775485246999027b3197955".toLowerCase();
const SUBSCRIPTIONS_FILE = "subscriptions.json";

// ‚úÖ File create if not exists
if (!fs.existsSync(SUBSCRIPTIONS_FILE)) {
  fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify({}));
}

const express = require("express");
const app = express();

app.get("/", (req, res) => {
  res.send("‚úÖ Crypto BD Bot is running!");
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üåê Web server running on port ${PORT}`);
});

// Start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const opts = {
    reply_markup: {
      keyboard: [
        ["üí∞ Buy Subscription"],
        ["üìä My Subscriptions"],
        ["‚ú® Benefit Of Subscription", "üìû HelpLine"],
      ],
      resize_keyboard: true,
    },
  };
  bot.sendMessage(chatId, `üëã Welcome to *Crypto BD Subscriptions Bot*!`, {
    parse_mode: "Markdown",
    ...opts,
  });
});

// Message handler
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "üí∞ Buy Subscription") {
    bot.sendMessage(chatId, `Choose a package:`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üóì Monthly ($2)", callback_data: "buy_monthly" },
            { text: "üìÖ Yearly ($15)", callback_data: "buy_yearly" },
          ],
        ],
      },
    });
  } else if (text === "üìä My Subscriptions") {
    const subscriptions = loadSubscriptions();
    const sub = subscriptions[chatId];

    const expiry = sub?.expiry || sub?.expiresAt;

    if (sub && expiry && new Date(expiry) > new Date()) {
      const timeLeft = Math.ceil(
        (new Date(expiry) - new Date()) / (1000 * 60 * 60 * 24),
      );
      const message =
        `‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü *${sub.package}* ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶∞‡ßü‡ßá‡¶õ‡ßá!\n` +
        `üìÖ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá: *${new Date(expiry).toLocaleDateString("bn-BD")}*\n` +
        `‚è≥ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®: *${timeLeft}* ‡¶¶‡¶ø‡¶®`;

      bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
    } else {
      bot.sendMessage(chatId, `‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶® ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡ßá‡¶á`);
    }
  } else if (text && /^0x[a-fA-F0-9]{64}$/.test(text.trim())) {
    const txHash = text.trim();
    const userId = msg.from.id;
    bot.sendMessage(chatId, `‚è≥ Verifying transaction...`);

    try {
      const result = await verifyTransaction(
        txHash,
        userId,
        chatId,
        "monthly",
        bot,
      );

      if (!result.success) {
        return bot.sendMessage(chatId, `‚ùå ${result.message}`);
      }

      const packageType = result.amount >= 15 ? "Yearly" : "Monthly";
      const durationDays = packageType === "Yearly" ? 365 : 30;

      const subscriptions = loadSubscriptions();
      const now = new Date();
      const expiry = new Date(
        now.getTime() + durationDays * 24 * 60 * 60 * 1000,
      );

      subscriptions[chatId] = {
        txHash,
        package: packageType,
        startDate: now.toISOString(),
        endDate: expiry.toISOString(),
        expiry,
        active: true,
      };

      saveSubscriptions(subscriptions);

      bot.sendMessage(
        chatId,
        `‚úÖ Subscription activated!\n\nüì¶ Package: ${packageType}\nüìÖ Valid till: ${expiry.toDateString()}`,
      );
      bot.sendMessage(
        ADMIN_ID,
        `üÜï New subscriber:\nUser: ${msg.from.username || chatId}\nPackage: ${packageType}\nTxHash: ${txHash}`,
      );
    } catch (err) {
      console.error(err);
      bot.sendMessage(
        chatId,
        `‚ùå Error verifying transaction. Try again later.`,
      );
    }
  } else if (text === "‚ú® Benefit Of Subscription") {
    bot.sendMessage(
      chatId,
      `üìú *CBDB Subscription ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶ì ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π:*\n\n*‚úÖ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡ßü‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:*  \n‡ßß) ‡¶™‡ßç‡¶∞‡¶§‡ßá‡¶ï ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï $2 ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶¨‡¶æ‡ßé‡¶∏‡¶∞‡¶ø‡¶ï $15 ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶´‡¶ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá (‡¶Ö‡¶´‡ßá‡¶∞‡¶§‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø)‡•§  \n‡ß®) ‡¶™‡ßç‡¶∞‡¶§‡ßá‡¶ï ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶∏‡¶æ‡¶™‡ßá‡¶ï‡ßç‡¶∑‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶°‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá (‡¶Ø‡¶æ ‡¶™‡¶∞‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá)‡•§  \n‡ß©) ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßá‡¶∞ ‡ßß ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶π‡¶§‡ßá ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá‡•§  \n‡ß™) ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶¨‡¶æ‡ßé‡¶∏‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶¨‡ßá‡¶®, ‡¶§‡¶æ‡¶∞‡¶æ $10 ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶°‡¶ø‡¶≤ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® (‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶õ‡¶æ‡ßú‡¶æ)‡•§  \n‡ß´) ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶¨‡ßá‡¶®, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡ßá‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶á ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§\n\nüóûÔ∏è *‡¶∞‡¶ø‡¶ú‡¶æ‡¶∞‡ßç‡¶≠ ‡¶´‡¶æ‡¶®‡ßç‡¶° ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶¨‡¶π‡¶æ‡¶∞:*  \nüîπ ‡ß®‡ß´% ‚Äì ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶¨‡¶ø‡¶§‡¶∞‡¶£  \nüîπ ‡ßß‡ß´% ‚Äì ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ó‡¶ø‡¶≠‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ì‡ßü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá  \nüîπ ‡ßß‡ß¶% ‚Äì ‡¶∏‡¶Æ‡¶æ‡¶ú‡¶∏‡ßá‡¶¨‡¶æ, ‡¶ó‡¶∞‡ßÄ‡¶¨/‡¶Ö‡¶∏‡¶π‡¶æ‡ßü ‡¶¨‡¶æ ‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡ßü ‡¶ï‡¶æ‡¶ú‡ßá  \nüîπ ‡ß´‡ß¶% ‚Äì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶´‡¶æ‡¶®‡ßç‡¶°\n\nüëâ *‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ:*  \n1) ‡ßß‡ß¶‡ß¶% ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶¨‡¶æ‡¶á ‡¶∏‡ßá‡¶≤ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ  \n2) ‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü  \n3) $10 ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶°‡¶ø‡¶≤ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶õ‡¶æ‡ßú‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® (‡¶¨‡¶æ‡ßé‡¶∏‡¶∞‡¶ø‡¶ï ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú‡ßá)  \n4) ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶π‡ßü, ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßç‡¶∑‡¶§‡¶ø‡¶™‡ßÇ‡¶∞‡¶£  \n5) ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∏‡ßá $1-$5 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≤‡¶ü‡¶æ‡¶∞‡¶ø ‡¶ú‡ßá‡¶§‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó\n\nüö´ *‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶•‡¶æ:*  \nüî∏ ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶°‡¶ø‡¶≤‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶π‡¶≤‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶¶‡¶æ‡¶Ø‡¶º ‡¶®‡ßá‡¶¨‡ßá ‡¶®‡¶æ  \nüî∏ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶°‡¶≤‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶Æ‡ßá‡¶®‡ßá ‡¶ö‡¶≤‡¶¨‡ßá‡¶® ‚Äì ‡¶≠‡ßÅ‡¶≤‡ßá‡¶ì ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶æ‡¶ï‡¶®‡¶æ‡¶Æ‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ  \nüî∏ ‡¶™‡¶æ‡¶ï‡¶®‡¶æ‡¶Æ‡¶ø ‡¶ß‡¶∞‡¶æ ‡¶™‡ßú‡¶≤‡ßá, ‡¶¶‡¶æ‡ßü ‡¶¶‡¶æ‡ßü‡¶ø‡¶§‡ßç‡¶¨ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞\n\nüõ°Ô∏è ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá CBDB ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ü‡¶ø‡¶Æ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶™‡ßç‡¶∞‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡•§  \n‚úÖ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶‡ßá ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
      { parse_mode: "Markdown" },
    );
  } else if (text === "üìû HelpLine") {
    const message = `
*üìû Support Contact*

‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:

üë§ @Jebon111  
‚è∞ ‡¶∏‡¶Æ‡ßü: ‡ß®‡ß™/‡ß≠ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß
`;
    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }
});

// Callback for package buttons
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const price = data === "buy_monthly" ? 2 : 15;

  bot.sendMessage(
    chatId,
    `Send *${price} USDT (BEP20)* to this wallet:\n\nüíº \`${WALLET}\`\n\nAfter payment, reply with your *transaction hash (txhash)*.`,
    { parse_mode: "Markdown" },
  );
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const isGroup = msg.chat.type === "supergroup" || msg.chat.type === "group";

  if (!isGroup) return; // ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá

  const subscriptions = loadSubscriptions();
  const sub = subscriptions[userId];

  const isAdmin = await bot.getChatAdministrators(chatId)
    .then(admins => admins.some(admin => admin.user.id === userId))
    .catch(() => false);

  const now = new Date();

  if (isAdmin) return; // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶≤‡¶¨‡ßá ‡¶®‡¶æ

  if (!sub || !sub.active || new Date(sub.expiry) < now) {
    // ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡ßá
    await bot.restrictChatMember(chatId, userId, {
      permissions: { can_send_messages: false },
      until_date: Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 365, // ‡ßß ‡¶¨‡¶õ‡¶∞
    });

    await bot.sendMessage(chatId, `‚õî @${msg.from.username || "user"}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡ßá‡¶á, ‡¶§‡¶æ‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶ø‡¶§‡ßá /start ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§`, {
      reply_to_message_id: msg.message_id,
    });
  }
});



// verifyTransaction(txhash, userId, chatId, packageType
// ‚úÖ Load subs
function loadSubscriptions() {
  return JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE));
}

// ‚úÖ Save subs
function loadSubscriptions() {
  if (!fs.existsSync(SUBSCRIPTIONS_FILE)) {
    fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify({}));
  }
  return JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE));
}

function saveSubscriptions(data) {
  fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify(data, null, 2));
}

function loadUsedTxHashes() {
  if (!fs.existsSync(USED_TX_FILE)) {
    fs.writeFileSync(USED_TX_FILE, JSON.stringify([]));
  }
  return JSON.parse(fs.readFileSync(USED_TX_FILE));
}

function saveUsedTxHashes(hashes) {
  fs.writeFileSync(USED_TX_FILE, JSON.stringify(hashes, null, 2));
}

// ‚úÖ Verify Transaction
async function verifyTransaction(txhash, userId, chatId, packageType, bot) {
  try {
    const response = await axios.post(process.env.RPC_URL, {
      jsonrpc: "2.0",
      method: "eth_getTransactionReceipt",
      params: [txhash],
      id: 1,
    });

    const receipt = response.data.result;

    if (!receipt) {
      await bot.sendMessage(
        chatId,
        "‚õî ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      );
      return { success: false, message: "‚õî ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§" };
    }

    const logs = receipt.logs;
    const transferLog = logs.find(
      (log) =>
        log.topics[0] === web3.utils.sha3("Transfer(address,address,uint256)"),
    );

    if (!transferLog) {
      await bot.sendMessage(
        chatId,
        "‚õî ‡¶è‡¶á ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®‡ßá ‡¶ï‡ßã‡¶® Transfer ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
      );
      return {
        success: false,
        message: "‚õî ‡¶ï‡ßã‡¶® Transfer ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§",
      };
    }

    const toAddress = "0x" + transferLog.topics[2].slice(26);
    const valueHex = transferLog.data;
    const value = parseInt(valueHex, 16) / 10 ** 18;

    const expectedAmount = packageType === "monthly" ? 2 : 15;

    if (toAddress.toLowerCase() !== WALLET.toLowerCase()) {
      await bot.sendMessage(chatId, "‚õî ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§");
      return { success: false, message: "‚õî ‡¶≠‡ßÅ‡¶≤ ‡¶ì‡ßü‡¶æ‡¶≤‡ßá‡¶ü‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" };
    }

    if (value < expectedAmount) {
      await bot.sendMessage(
        chatId,
        `‚õî ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶á‡¶â‡¶è‡¶∏‡¶°‡¶ø‡¶ü‡¶ø (${expectedAmount} USDT) ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡¶®‡¶ø‡•§`,
      );
      return {
        success: false,
        message: `‚õî ${expectedAmount} USDT ‡¶ï‡¶Æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
      };
    }

    // ‚úÖ Load subscriptions & used hashes
    const subscriptions = loadSubscriptions();
    const usedTxs = loadUsedTxHashes();

    // üîÅ Check if already used
    if (usedTxs.includes(txhash)) {
      await bot.sendMessage(chatId, "‚õî ‡¶è‡¶á TxHash ‡¶Ü‡¶ó‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
      return { success: false, message: "‚õî TxHash ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" };
    }

    // üïí Set duration
    const now = new Date();
    const endDate = new Date(now);
    if (packageType === "monthly") endDate.setMonth(endDate.getMonth() + 1);
    else endDate.setFullYear(endDate.getFullYear() + 1);

    // ‚úÖ Save subscription
    subscriptions[userId] = {
      txhash,
      package: packageType,
      startDate: now.toISOString(),
      endDate: endDate.toISOString(),
      expiry: endDate.toISOString(),
      active: true,
      chatId,
    };


    // ‚úÖ Save both files
    saveSubscriptions(subscriptions);
    usedTxs.push(txhash);
    saveUsedTxHashes(usedTxs);

    // ‚úÖ Confirmation message
    await bot.sendMessage(
      chatId,
      `‚úÖ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø‡¶≠ ‡¶π‡ßü‡ßá‡¶õ‡ßá!\nüì¶ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú: ${packageType}\nüóì ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑: ${endDate.toDateString()}`,
    );
    try {
  const member = await bot.getChatMember(GROUP_ID, userId);
  const isAdmin = ["administrator", "creator"].includes(member.status);

  if (!isAdmin) {
    await bot.restrictChatMember(GROUP_ID, parseInt(userId), {
      permissions: {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_polls: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true,
        can_change_info: false,
        can_invite_users: true,
        can_pin_messages: false
      }
    });

    await bot.sendMessage(chatId, "üîì ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!");
  }
} catch (e) {
  console.error("Unmute Error:", e.message);
}
    await bot.sendMessage(
      ADMIN_ID,
      `üë§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶®:\nüÜî User ID: ${userId}\nüí∏ ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú: ${packageType}\nüîó TxHash: ${txhash}`,
    );

    return { success: true };
  } catch (error) {
    console.error("verifyTransaction error:", error);
    await bot.sendMessage(
      chatId,
      "‚õî ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
    );
    return { success: false, message: "‚õî ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§" };
  }
}

// ‚úÖ User command (only one!)
bot.onText(/\/verify (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const txhash = match[1];
  const packageType = "monthly"; // Future dynamic

  await bot.sendMessage(chatId, "‚è≥ Verifying transaction...");

  const result = await verifyTransaction(
    txhash,
    userId,
    chatId,
    packageType,
    bot,
  );

  if (!result.success) {
    return bot.sendMessage(chatId, `‚ùå ${result.message}`);
  }
});

// ‚úÖ Expiry checker (every hour)
setInterval(async () => {
    if (!fs.existsSync(SUBSCRIPTIONS_FILE)) return;

    const subscriptions = JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE));
    const now = new Date();

    for (const userId in subscriptions) {
      const sub = subscriptions[userId];
      const expiry = new Date(sub.expiry);
      if (now > expiry && sub.active) {
  sub.active = false;

  bot.sendMessage(
    userId,
    "‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶ï‡¶ø‡¶®‡ßÅ‡¶®‡•§"
  );

  try {
    await bot.restrictChatMember(GROUP_ID, parseInt(userId), {
      permissions: {
        can_send_messages: false
      }
    });

    await bot.sendMessage(userId, "üîá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶®‡¶¨‡¶æ‡¶Ø‡¶º‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶™‡¶æ‡¶®‡•§");
  } catch (e) {
    console.log("Mute error:", e.message);
  }
}


    fs.writeFileSync(
      SUBSCRIPTIONS_FILE,
      JSON.stringify(subscriptions, null, 2),
    );
  }
  
  60 * 60 * 1000,
); // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶™‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá

app.get("/", (req, res) => {
  res.send("ü§ñ Telegram Bot is running...");
});

app.listen(3000, () => {
  console.log("üåê HTTP server running on port 3000");
});
